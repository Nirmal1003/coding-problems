int firstoccurrence(vector<int>& arr,int n,int key)  // can also be called as leftmost occurrence
{
 int start=0;
 int end =n-1;
 int mid=start+(end-start)/2;
 int ans=-1;

 while(start<=end)
 {
    if(arr[mid]==key)
    {
        ans=mid;
        end=mid-1;
    }

    else if(key>arr[mid])
    {
        start=mid+1;
    }

    else //if(key<arr[mid])
    {
        end=mid-1;

    }

    mid=start+(end-start)/2;
 }
 return ans;
}


int lastoccurrence(vector<int>& arr,int n,int key)   //can also be called as rightmost occurrence
{
 int start=0;
 int end =n-1;
 int mid=start+(end-start)/2;
 int ans=-1;

 while(start<=end)
 {
    if(arr[mid]==key)
    {
        ans=mid;
        start=mid+1;               // the only change in both first and last occurrence function is this line only 
    }

    else if(key>arr[mid])
    {
        start=mid+1;
    }

    else //if(key<arr[mid])
    {
        end=mid-1;

    }

    mid=start+(end-start)/2;
 }
 return ans;
}


pair<int, int> firstAndLastPosition(vector<int>& arr, int n, int k)
{
    pair<int,int>p;
    p.first=firstoccurrence(arr,n,k);
    p.second=lastoccurrence(arr,n,k);
    return p;
   
}
